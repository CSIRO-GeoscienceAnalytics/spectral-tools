name: Release

on:
  push:
    tags:
      - v*

jobs:

  build-linux:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }} x64
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Python package dependencies
      run: pip install cython wheel

    - name: Build binary wheel
      run: python setup.py bdist_wheel

    - name: Archive dist artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-linux-${{ matrix.python-version }}
        path: dist

  # build-macos:
  #   runs-on: macos-latest
  #   strategy:
  #     max-parallel: 4
  #     matrix:
  #       python-version: [3.8, 3.9, 3.10, 3.11]

  #   steps:
  #   - uses: actions/checkout@v3

  #   - name: Set up Python ${{ matrix.python-version }} x64
  #     uses: actions/setup-python@v4
  #     with:
  #       python-version: ${{ matrix.python-version }}

  #   - name: Install Python package dependencies
  #     run: pip install cython wheel

  #   - name: Build binary wheel
  #     run: python setup.py bdist_wheel

  #   - name: Archive dist artifacts
  #     uses: actions/upload-artifact@v3
  #     with:
  #       name: dist-macos-${{ matrix.python-version }}
  #       path: dist

  build-windows:
    runs-on: windows-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v3

    - name: Download Build Tools for Visual Studio 2019
      run: Invoke-WebRequest -Uri https://aka.ms/vs/16/release/vs_buildtools.exe -OutFile vs_buildtools.exe

    - name: Run vs_buildtools.exe install
      run: ./vs_buildtools.exe --quiet --wait --norestart --nocache --add Microsoft.VisualStudio.Component.VC.Tools.x86.x64 --add Microsoft.VisualStudio.Component.VC.v141.x86.x64 --add Microsoft.VisualStudio.Component.VC.140 --includeRecommended

    - name: Set up Python ${{ matrix.python-version }} x64
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        architecture: x64

    - name: Install Python package dependencies
      run: pip install cython wheel

    - name: Build binary wheel
      run: python setup.py bdist_wheel

    - name: Archive dist artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-windows-${{ matrix.python-version }}
        path: dist

  upload:
    needs: [build-linux, build-windows]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    - name: Install Poetry
      uses: abatilo/actions-poetry@v2
      with:
        poetry-version: "1.3.2"

    - name: Install dependencies
      run: |
        poetry install
    - name: Create source dist
      run: poetry run python setup.py sdist

    - name: Stage linux 3.8
      uses: actions/download-artifact@v3
      with:
        name: dist-linux-3.8
    - run: mv -v dist-linux-3.8/* dist/

    - name: Stage linux 3.9
      uses: actions/download-artifact@v3
      with:
        name: dist-linux-3.9
    - run: mv -v dist-linux-3.9/* dist/

    - name: Stage linux 3.10
      uses: actions/download-artifact@v3
      with:
        name: dist-linux-3.10
    - run: mv -v dist-linux-3.10/* dist/

    - name: Stage linux 3.11
      uses: actions/download-artifact@v3
      with:
        name: dist-linux-3.11
    - run: mv -v dist-linux-3.11/* dist/

    # - name: Stage macos 3.8
    #   uses: actions/download-artifact@v3
    #   with:
    #     name: dist-macos-3.8
    # - run: mv -v dist-macos-3.8/* dist/

    # - name: Stage macos 3.9
    #   uses: actions/download-artifact@v3
    #   with:
    #     name: dist-macos-3.9
    # - run: mv -v dist-macos-3.9/* dist/

    # - name: Stage macos 3.10
    #   uses: actions/download-artifact@v3
    #   with:
    #     name: dist-macos-3.10
    # - run: mv -v dist-macos-3.10/* dist/

    # - name: Stage macos 3.11
    #   uses: actions/download-artifact@v3
    #   with:
    #     name: dist-macos-3.11
    # - run: mv -v dist-macos-3.11/* dist/

    - name: Stage windows 3.8
      uses: actions/download-artifact@v3
      with:
        name: dist-windows-3.8
    - run: mv -v dist-windows-3.8/* dist/

    - name: Stage windows 3.9
      uses: actions/download-artifact@v3
      with:
        name: dist-windows-3.9
    - run: mv -v dist-windows-3.9/* dist/

    - name: Stage windows 3.10
      uses: actions/download-artifact@v3
      with:
        name: dist-windows-3.10
    - run: mv -v dist-windows-3.10/* dist/

    - name: Stage windows 3.11
      uses: actions/download-artifact@v3
      with:
        name: dist-windows-3.11
    - run: mv -v dist-windows-3.11/* dist/

    - name: Create PYPIRC
      env:
        PYPI_RC: ${{ secrets.PYPIRC_TEST }}
      run: |
        echo $PYPI_RC > ~/.pypirc

    - name: Upload with twine
      env:
        TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
      run: |
        ls -l dist/*
        pip install twine
        twine upload --repository testpypi dist/*
